// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using practice_TrekCompany.Data;

#nullable disable

namespace practice_TrekCompany.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230529194758_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("practice_TrekCompany.Models.factory.Factory", b =>
                {
                    b.Property<int>("factoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("factoryId"));

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("zipCode")
                        .HasColumnType("int");

                    b.HasKey("factoryId");

                    b.ToTable("Factories");
                });

            modelBuilder.Entity("practice_TrekCompany.Models.factory.JobTitle", b =>
                {
                    b.Property<int>("jobTitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("jobTitleId"));

                    b.Property<string>("jobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("jobTitleId");

                    b.ToTable("JobTitles");
                });

            modelBuilder.Entity("practice_TrekCompany.Models.factory.Staff", b =>
                {
                    b.Property<int>("staffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("staffId"));

                    b.Property<int>("factoryId")
                        .HasColumnType("int");

                    b.Property<int>("jobTitleId")
                        .HasColumnType("int");

                    b.HasKey("staffId");

                    b.HasIndex("factoryId");

                    b.HasIndex("jobTitleId");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("practice_TrekCompany.Models.production.Bike", b =>
                {
                    b.Property<int>("bikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("bikeId"));

                    b.Property<string>("bikeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bikeImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bikeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("bikePrice")
                        .HasColumnType("int");

                    b.Property<float>("bikeWeight")
                        .HasColumnType("real");

                    b.Property<int>("equipmentId")
                        .HasColumnType("int");

                    b.Property<int>("framesetId")
                        .HasColumnType("int");

                    b.Property<int>("groopsetId")
                        .HasColumnType("int");

                    b.Property<int>("typeOfBikeId")
                        .HasColumnType("int");

                    b.Property<int>("wheelsetId")
                        .HasColumnType("int");

                    b.HasKey("bikeId");

                    b.HasIndex("equipmentId");

                    b.HasIndex("framesetId");

                    b.HasIndex("groopsetId");

                    b.HasIndex("typeOfBikeId");

                    b.HasIndex("wheelsetId");

                    b.ToTable("Bikes");
                });

            modelBuilder.Entity("practice_TrekCompany.Models.production.Equipment", b =>
                {
                    b.Property<int>("equipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("equipmentId"));

                    b.Property<int>("brakeId")
                        .HasColumnType("int");

                    b.Property<int>("gripsId")
                        .HasColumnType("int");

                    b.Property<int>("handlebarId")
                        .HasColumnType("int");

                    b.Property<int>("saddleId")
                        .HasColumnType("int");

                    b.Property<int>("seatPostId")
                        .HasColumnType("int");

                    b.Property<int>("steeringId")
                        .HasColumnType("int");

                    b.Property<int>("stemId")
                        .HasColumnType("int");

                    b.HasKey("equipmentId");

                    b.HasIndex("brakeId");

                    b.HasIndex("gripsId");

                    b.HasIndex("handlebarId");

                    b.HasIndex("saddleId");

                    b.HasIndex("seatPostId");

                    b.HasIndex("steeringId");

                    b.HasIndex("stemId");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("practice_TrekCompany.Models.production.Frameset", b =>
                {
                    b.Property<int>("framesetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("framesetId"));

                    b.Property<int>("forkId")
                        .HasColumnType("int");

                    b.Property<int>("frameId")
                        .HasColumnType("int");

                    b.HasKey("framesetId");

                    b.HasIndex("forkId");

                    b.HasIndex("frameId");

                    b.ToTable("Framesets");
                });

            modelBuilder.Entity("practice_TrekCompany.Models.production.Groopset", b =>
                {
                    b.Property<int>("groopsetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("groopsetId"));

                    b.Property<int>("carriageId")
                        .HasColumnType("int");

                    b.Property<int>("pedalsId")
                        .HasColumnType("int");

                    b.Property<int>("transmitionId")
                        .HasColumnType("int");

                    b.HasKey("groopsetId");

                    b.HasIndex("carriageId");

                    b.HasIndex("pedalsId");

                    b.HasIndex("transmitionId");

                    b.ToTable("Groopsets");
                });

            modelBuilder.Entity("practice_TrekCompany.Models.production.TypeOfBike", b =>
                {
                    b.Property<int>("typeOfBikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("typeOfBikeId"));

                    b.Property<string>("typeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("typeOfBikeId");

                    b.ToTable("TypeOfBikes");
                });

            modelBuilder.Entity("practice_TrekCompany.Models.production.Wheelset", b =>
                {
                    b.Property<int>("wheelsetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("wheelsetId"));

                    b.Property<int>("hubId")
                        .HasColumnType("int");

                    b.Property<int>("rimId")
                        .HasColumnType("int");

                    b.Property<int>("tireId")
                        .HasColumnType("int");

                    b.HasKey("wheelsetId");

                    b.HasIndex("hubId");

                    b.HasIndex("rimId");

                    b.HasIndex("tireId");

                    b.ToTable("Wheelsets");
                });

            modelBuilder.Entity("practice_TrekCompany.Models.spares.sparesEquipment.Brake", b =>
                {
                    b.Property<int>("brakeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("brakeId"));

                    b.Property<string>("brakeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("brakeId");

                    b.ToTable("Brakes");
                });

            modelBuilder.Entity("practice_TrekCompany.Models.spares.sparesEquipment.Grips", b =>
                {
                    b.Property<int>("gripsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("gripsId"));

                    b.Property<string>("gripsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("gripsId");

                    b.ToTable("Gripses");
                });

            modelBuilder.Entity("practice_TrekCompany.Models.spares.sparesEquipment.Handlebar", b =>
                {
                    b.Property<int>("handlbarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("handlbarId"));

                    b.Property<string>("handlbarName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("handlbarId");

                    b.ToTable("Handlebars");
                });

            modelBuilder.Entity("practice_TrekCompany.Models.spares.sparesEquipment.Saddle", b =>
                {
                    b.Property<int>("saddleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("saddleId"));

                    b.Property<string>("saddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("saddleId");

                    b.ToTable("Saddles");
                });

            modelBuilder.Entity("practice_TrekCompany.Models.spares.sparesEquipment.SeatPost", b =>
                {
                    b.Property<int>("seatPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("seatPostId"));

                    b.Property<string>("seatPostName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("seatPostId");

                    b.ToTable("SeatPosts");
                });

            modelBuilder.Entity("practice_TrekCompany.Models.spares.sparesEquipment.Steering", b =>
                {
                    b.Property<int>("steeringId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("steeringId"));

                    b.Property<string>("steeringName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("steeringId");

                    b.ToTable("Steerings");
                });

            modelBuilder.Entity("practice_TrekCompany.Models.spares.sparesEquipment.Stem", b =>
                {
                    b.Property<int>("stemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("stemId"));

                    b.Property<string>("stemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("stemId");

                    b.ToTable("Stems");
                });

            modelBuilder.Entity("practice_TrekCompany.Models.spares.sparesFrameset.Fork", b =>
                {
                    b.Property<int>("forkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("forkId"));

                    b.Property<string>("forkDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("forkName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("forkQuantity")
                        .HasColumnType("int");

                    b.HasKey("forkId");

                    b.ToTable("Forks");
                });

            modelBuilder.Entity("practice_TrekCompany.Models.spares.sparesFrameset.Frame", b =>
                {
                    b.Property<int>("frameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("frameId"));

                    b.Property<string>("frameDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("frameName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("frameQuantity")
                        .HasColumnType("int");

                    b.HasKey("frameId");

                    b.ToTable("Frames");
                });

            modelBuilder.Entity("practice_TrekCompany.Models.spares.sparesGroopset.Carriage", b =>
                {
                    b.Property<int>("carriageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("carriageId"));

                    b.Property<string>("carriageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("carriageQuantity")
                        .HasColumnType("int");

                    b.HasKey("carriageId");

                    b.ToTable("Carriages");
                });

            modelBuilder.Entity("practice_TrekCompany.Models.spares.sparesGroopset.Pedals", b =>
                {
                    b.Property<int>("pedalsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("pedalsId"));

                    b.Property<string>("pedalsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pedalsQuantity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("pedalsId");

                    b.ToTable("Pedalses");
                });

            modelBuilder.Entity("practice_TrekCompany.Models.spares.sparesGroopset.Transmition", b =>
                {
                    b.Property<int>("transmitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("transmitionId"));

                    b.Property<int>("cassetteId")
                        .HasColumnType("int");

                    b.Property<int>("shifterId")
                        .HasColumnType("int");

                    b.Property<int>("switchId")
                        .HasColumnType("int");

                    b.Property<int>("transmitionQuantity")
                        .HasColumnType("int");

                    b.HasKey("transmitionId");

                    b.HasIndex("cassetteId");

                    b.HasIndex("shifterId");

                    b.HasIndex("switchId");

                    b.ToTable("Transmitions");
                });

            modelBuilder.Entity("practice_TrekCompany.Models.spares.sparesTransmition.Cassette", b =>
                {
                    b.Property<int>("cassetteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("cassetteId"));

                    b.Property<string>("cassetteName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("cassetteId");

                    b.ToTable("Cassettes");
                });

            modelBuilder.Entity("practice_TrekCompany.Models.spares.sparesTransmition.Shifter", b =>
                {
                    b.Property<int>("shifterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("shifterId"));

                    b.Property<string>("shifterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("shifterId");

                    b.ToTable("Shifters");
                });

            modelBuilder.Entity("practice_TrekCompany.Models.spares.sparesTransmition.Switch", b =>
                {
                    b.Property<int>("switchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("switchId"));

                    b.Property<string>("switchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("switchId");

                    b.ToTable("Switches");
                });

            modelBuilder.Entity("practice_TrekCompany.Models.spares.sparesWheelset.Hub", b =>
                {
                    b.Property<int>("hubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("hubId"));

                    b.Property<string>("hubDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("hubName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("hubQuantity")
                        .HasColumnType("int");

                    b.HasKey("hubId");

                    b.ToTable("Hubs");
                });

            modelBuilder.Entity("practice_TrekCompany.Models.spares.sparesWheelset.Rim", b =>
                {
                    b.Property<int>("rimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("rimId"));

                    b.Property<string>("rimDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("rimName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("rimQuantity")
                        .HasColumnType("int");

                    b.HasKey("rimId");

                    b.ToTable("Rims");
                });

            modelBuilder.Entity("practice_TrekCompany.Models.spares.sparesWheelset.Tire", b =>
                {
                    b.Property<int>("tireId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("tireId"));

                    b.Property<string>("tireDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tireName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("tireQuantity")
                        .HasColumnType("int");

                    b.HasKey("tireId");

                    b.ToTable("Tires");
                });

            modelBuilder.Entity("practice_TrekCompany.Models.factory.Staff", b =>
                {
                    b.HasOne("practice_TrekCompany.Models.factory.Factory", "Factory")
                        .WithMany()
                        .HasForeignKey("factoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("practice_TrekCompany.Models.factory.JobTitle", "JobTitle")
                        .WithMany()
                        .HasForeignKey("jobTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Factory");

                    b.Navigation("JobTitle");
                });

            modelBuilder.Entity("practice_TrekCompany.Models.production.Bike", b =>
                {
                    b.HasOne("practice_TrekCompany.Models.production.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("equipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("practice_TrekCompany.Models.production.Frameset", "Frameset")
                        .WithMany()
                        .HasForeignKey("framesetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("practice_TrekCompany.Models.production.Groopset", "Groopset")
                        .WithMany()
                        .HasForeignKey("groopsetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("practice_TrekCompany.Models.production.TypeOfBike", "TypeOfBike")
                        .WithMany()
                        .HasForeignKey("typeOfBikeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("practice_TrekCompany.Models.production.Wheelset", "Wheelset")
                        .WithMany()
                        .HasForeignKey("wheelsetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("Frameset");

                    b.Navigation("Groopset");

                    b.Navigation("TypeOfBike");

                    b.Navigation("Wheelset");
                });

            modelBuilder.Entity("practice_TrekCompany.Models.production.Equipment", b =>
                {
                    b.HasOne("practice_TrekCompany.Models.spares.sparesEquipment.Brake", "Brake")
                        .WithMany()
                        .HasForeignKey("brakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("practice_TrekCompany.Models.spares.sparesEquipment.Grips", "Grips")
                        .WithMany()
                        .HasForeignKey("gripsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("practice_TrekCompany.Models.spares.sparesEquipment.Handlebar", "Handlebar")
                        .WithMany()
                        .HasForeignKey("handlebarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("practice_TrekCompany.Models.spares.sparesEquipment.Saddle", "Saddle")
                        .WithMany()
                        .HasForeignKey("saddleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("practice_TrekCompany.Models.spares.sparesEquipment.SeatPost", "SeatPost")
                        .WithMany()
                        .HasForeignKey("seatPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("practice_TrekCompany.Models.spares.sparesEquipment.Steering", "Steering")
                        .WithMany()
                        .HasForeignKey("steeringId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("practice_TrekCompany.Models.spares.sparesEquipment.Stem", "Stem")
                        .WithMany()
                        .HasForeignKey("stemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brake");

                    b.Navigation("Grips");

                    b.Navigation("Handlebar");

                    b.Navigation("Saddle");

                    b.Navigation("SeatPost");

                    b.Navigation("Steering");

                    b.Navigation("Stem");
                });

            modelBuilder.Entity("practice_TrekCompany.Models.production.Frameset", b =>
                {
                    b.HasOne("practice_TrekCompany.Models.spares.sparesFrameset.Fork", "Fork")
                        .WithMany()
                        .HasForeignKey("forkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("practice_TrekCompany.Models.spares.sparesFrameset.Frame", "Frame")
                        .WithMany()
                        .HasForeignKey("frameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fork");

                    b.Navigation("Frame");
                });

            modelBuilder.Entity("practice_TrekCompany.Models.production.Groopset", b =>
                {
                    b.HasOne("practice_TrekCompany.Models.spares.sparesGroopset.Carriage", "Carriage")
                        .WithMany()
                        .HasForeignKey("carriageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("practice_TrekCompany.Models.spares.sparesGroopset.Pedals", "Pedals")
                        .WithMany()
                        .HasForeignKey("pedalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("practice_TrekCompany.Models.spares.sparesGroopset.Transmition", "Transmition")
                        .WithMany()
                        .HasForeignKey("transmitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carriage");

                    b.Navigation("Pedals");

                    b.Navigation("Transmition");
                });

            modelBuilder.Entity("practice_TrekCompany.Models.production.Wheelset", b =>
                {
                    b.HasOne("practice_TrekCompany.Models.spares.sparesWheelset.Hub", "Hub")
                        .WithMany()
                        .HasForeignKey("hubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("practice_TrekCompany.Models.spares.sparesWheelset.Rim", "Rim")
                        .WithMany()
                        .HasForeignKey("rimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("practice_TrekCompany.Models.spares.sparesWheelset.Tire", "Tire")
                        .WithMany()
                        .HasForeignKey("tireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hub");

                    b.Navigation("Rim");

                    b.Navigation("Tire");
                });

            modelBuilder.Entity("practice_TrekCompany.Models.spares.sparesGroopset.Transmition", b =>
                {
                    b.HasOne("practice_TrekCompany.Models.spares.sparesTransmition.Cassette", "Cassette")
                        .WithMany()
                        .HasForeignKey("cassetteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("practice_TrekCompany.Models.spares.sparesTransmition.Shifter", "Shifter")
                        .WithMany()
                        .HasForeignKey("shifterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("practice_TrekCompany.Models.spares.sparesTransmition.Switch", "Switch")
                        .WithMany()
                        .HasForeignKey("switchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cassette");

                    b.Navigation("Shifter");

                    b.Navigation("Switch");
                });
#pragma warning restore 612, 618
        }
    }
}
